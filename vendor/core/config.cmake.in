@PACKAGE_INIT@

# Support both casing styles
list(APPEND SOURCEMETA_CORE_COMPONENTS ${Core_FIND_COMPONENTS})
list(APPEND SOURCEMETA_CORE_COMPONENTS ${core_FIND_COMPONENTS})
if(NOT SOURCEMETA_CORE_COMPONENTS)
  list(APPEND SOURCEMETA_CORE_COMPONENTS io)
  list(APPEND SOURCEMETA_CORE_COMPONENTS time)
  list(APPEND SOURCEMETA_CORE_COMPONENTS uuid)
  list(APPEND SOURCEMETA_CORE_COMPONENTS gzip)
  list(APPEND SOURCEMETA_CORE_COMPONENTS md5)
  list(APPEND SOURCEMETA_CORE_COMPONENTS regex)
  list(APPEND SOURCEMETA_CORE_COMPONENTS uri)
  list(APPEND SOURCEMETA_CORE_COMPONENTS json)
  list(APPEND SOURCEMETA_CORE_COMPONENTS jsonl)
  list(APPEND SOURCEMETA_CORE_COMPONENTS jsonpointer)
  list(APPEND SOURCEMETA_CORE_COMPONENTS jsonschema)
  list(APPEND SOURCEMETA_CORE_COMPONENTS yaml)
  list(APPEND SOURCEMETA_CORE_COMPONENTS alterschema)
endif()

include(CMakeFindDependencyMacro)

foreach(component ${SOURCEMETA_CORE_COMPONENTS})
  if(component STREQUAL "io")
    include("${CMAKE_CURRENT_LIST_DIR}/sourcemeta_core_io.cmake")
  elseif(component STREQUAL "time")
    include("${CMAKE_CURRENT_LIST_DIR}/sourcemeta_core_time.cmake")
  elseif(component STREQUAL "uuid")
    include("${CMAKE_CURRENT_LIST_DIR}/sourcemeta_core_uuid.cmake")
  elseif(component STREQUAL "gzip")
    find_dependency(ZLIB CONFIG)
    include("${CMAKE_CURRENT_LIST_DIR}/sourcemeta_core_gzip.cmake")
  elseif(component STREQUAL "md5")
    find_dependency(BearSSL CONFIG)
    include("${CMAKE_CURRENT_LIST_DIR}/sourcemeta_core_md5.cmake")
  elseif(component STREQUAL "regex")
    find_dependency(BoostRegex CONFIG)
    include("${CMAKE_CURRENT_LIST_DIR}/sourcemeta_core_regex.cmake")
  elseif(component STREQUAL "uri")
    find_dependency(uriparser CONFIG)
    include("${CMAKE_CURRENT_LIST_DIR}/sourcemeta_core_uri.cmake")
  elseif(component STREQUAL "json")
    include("${CMAKE_CURRENT_LIST_DIR}/sourcemeta_core_io.cmake")
    include("${CMAKE_CURRENT_LIST_DIR}/sourcemeta_core_json.cmake")
  elseif(component STREQUAL "jsonl")
    include("${CMAKE_CURRENT_LIST_DIR}/sourcemeta_core_json.cmake")
    include("${CMAKE_CURRENT_LIST_DIR}/sourcemeta_core_jsonl.cmake")
  elseif(component STREQUAL "jsonpointer")
    find_dependency(uriparser CONFIG)
    include("${CMAKE_CURRENT_LIST_DIR}/sourcemeta_core_regex.cmake")
    include("${CMAKE_CURRENT_LIST_DIR}/sourcemeta_core_uri.cmake")
    include("${CMAKE_CURRENT_LIST_DIR}/sourcemeta_core_json.cmake")
    include("${CMAKE_CURRENT_LIST_DIR}/sourcemeta_core_jsonpointer.cmake")
  elseif(component STREQUAL "jsonschema")
    find_dependency(uriparser CONFIG)
    include("${CMAKE_CURRENT_LIST_DIR}/sourcemeta_core_uri.cmake")
    include("${CMAKE_CURRENT_LIST_DIR}/sourcemeta_core_json.cmake")
    include("${CMAKE_CURRENT_LIST_DIR}/sourcemeta_core_jsonpointer.cmake")
    include("${CMAKE_CURRENT_LIST_DIR}/sourcemeta_core_jsonschema.cmake")
  elseif(component STREQUAL "yaml")
    include("${CMAKE_CURRENT_LIST_DIR}/sourcemeta_core_json.cmake")
    find_dependency(yaml CONFIG)
    include("${CMAKE_CURRENT_LIST_DIR}/sourcemeta_core_io.cmake")
    include("${CMAKE_CURRENT_LIST_DIR}/sourcemeta_core_yaml.cmake")
  elseif(component STREQUAL "alterschema")
    find_dependency(uriparser CONFIG)
    include("${CMAKE_CURRENT_LIST_DIR}/sourcemeta_core_uri.cmake")
    include("${CMAKE_CURRENT_LIST_DIR}/sourcemeta_core_json.cmake")
    include("${CMAKE_CURRENT_LIST_DIR}/sourcemeta_core_jsonpointer.cmake")
    include("${CMAKE_CURRENT_LIST_DIR}/sourcemeta_core_jsonschema.cmake")
    include("${CMAKE_CURRENT_LIST_DIR}/sourcemeta_core_alterschema.cmake")
  else()
    message(FATAL_ERROR "Unknown Sourcemeta Core component: ${component}")
  endif()
endforeach()

check_required_components("@PROJECT_NAME@")
